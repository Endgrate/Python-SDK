# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EndgrateJsonSchema(BaseModel):
    """
    full JSON schema of objects.
    """ # noqa: E501
    type: Optional[StrictStr] = None
    associations: Optional[StrictBool] = None
    endgrate_type: Optional[StrictStr] = Field(default=None, description="This field requires a valid `endgrate_type`. If you choose not to utilize a predefined `endgrate_type`, you must provide a `title`.")
    properties: Optional[Dict[str, Any]] = None
    required: Optional[List[StrictStr]] = None
    title: Optional[StrictStr] = Field(default=None, description="The `title` of this schema that will be displayed to the user. If no `endgrate_type` has been provided, `title` should be used as a substitute for `endgrate_type` in subsequent API calls.")
    __properties: ClassVar[List[str]] = ["type", "associations", "endgrate_type", "properties", "required", "title"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['object']):
            raise ValueError("must be one of enum values ('object')")
        return value

    @field_validator('endgrate_type')
    def endgrate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['accounting-address', 'accounting-company', 'accounting-contact', 'accounting-contact_people', 'accounting-invoice', 'accounting-payment', 'accounting-product', 'accounting-purchase_order', 'analytics-lead', 'analytics-note', 'analytics-page_analytics', 'analytics-page_views', 'analytics-user', 'analytics-user_count', 'ats-candidate', 'calendar-event', 'communication-meeting', 'communication-message_history', 'communication-user', 'crm-activity', 'crm-company', 'crm-contact', 'crm-deal', 'crm-lead', 'crm-customer', 'crm-note', 'crm-policy', 'crm-product', 'crm-task', 'crm-ticket', 'crm-user', 'database-user', 'ecommerce-customer', 'ecommerce-order', 'ecommerce-product', 'ecommerce-product_category', 'ecommerce-product_collection', 'ecommerce-product_variant', 'forms-lead', 'forms-question', 'helpdesk-company', 'helpdesk-contact', 'helpdesk-note', 'helpdesk-user', 'marketing-contact', 'marketing-customer', 'marketing-lead', 'marketing-user', 'prospecting-company', 'prospecting-contact', 'workspace-task', 'workspace-user']):
            raise ValueError("must be one of enum values ('accounting-address', 'accounting-company', 'accounting-contact', 'accounting-contact_people', 'accounting-invoice', 'accounting-payment', 'accounting-product', 'accounting-purchase_order', 'analytics-lead', 'analytics-note', 'analytics-page_analytics', 'analytics-page_views', 'analytics-user', 'analytics-user_count', 'ats-candidate', 'calendar-event', 'communication-meeting', 'communication-message_history', 'communication-user', 'crm-activity', 'crm-company', 'crm-contact', 'crm-deal', 'crm-lead', 'crm-customer', 'crm-note', 'crm-policy', 'crm-product', 'crm-task', 'crm-ticket', 'crm-user', 'database-user', 'ecommerce-customer', 'ecommerce-order', 'ecommerce-product', 'ecommerce-product_category', 'ecommerce-product_collection', 'ecommerce-product_variant', 'forms-lead', 'forms-question', 'helpdesk-company', 'helpdesk-contact', 'helpdesk-note', 'helpdesk-user', 'marketing-contact', 'marketing-customer', 'marketing-lead', 'marketing-user', 'prospecting-company', 'prospecting-contact', 'workspace-task', 'workspace-user')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndgrateJsonSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndgrateJsonSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "associations": obj.get("associations"),
            "endgrate_type": obj.get("endgrate_type"),
            "properties": obj.get("properties"),
            "required": obj.get("required"),
            "title": obj.get("title")
        })
        return _obj


