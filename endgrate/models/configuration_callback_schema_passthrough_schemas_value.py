# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from endgrate.models.configuration_callback_schema_passthrough_schemas_value_integration_info import ConfigurationCallbackSchemaPassthroughSchemasValueIntegrationInfo
from endgrate.models.configuration_callback_schema_passthrough_schemas_value_passthrough_fields import ConfigurationCallbackSchemaPassthroughSchemasValuePassthroughFields
from endgrate.models.configuration_callback_schema_passthrough_schemas_value_schema import ConfigurationCallbackSchemaPassthroughSchemasValueSchema
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationCallbackSchemaPassthroughSchemasValue(BaseModel):
    """
    ConfigurationCallbackSchemaPassthroughSchemasValue
    """ # noqa: E501
    integration_info: Optional[ConfigurationCallbackSchemaPassthroughSchemasValueIntegrationInfo] = None
    var_schema: Optional[ConfigurationCallbackSchemaPassthroughSchemasValueSchema] = Field(default=None, alias="schema")
    passthrough_fields: Optional[ConfigurationCallbackSchemaPassthroughSchemasValuePassthroughFields] = None
    __properties: ClassVar[List[str]] = ["integration_info", "schema", "passthrough_fields"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationCallbackSchemaPassthroughSchemasValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integration_info
        if self.integration_info:
            _dict['integration_info'] = self.integration_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passthrough_fields
        if self.passthrough_fields:
            _dict['passthrough_fields'] = self.passthrough_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationCallbackSchemaPassthroughSchemasValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "integration_info": ConfigurationCallbackSchemaPassthroughSchemasValueIntegrationInfo.from_dict(obj["integration_info"]) if obj.get("integration_info") is not None else None,
            "schema": ConfigurationCallbackSchemaPassthroughSchemasValueSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "passthrough_fields": ConfigurationCallbackSchemaPassthroughSchemasValuePassthroughFields.from_dict(obj["passthrough_fields"]) if obj.get("passthrough_fields") is not None else None
        })
        return _obj


