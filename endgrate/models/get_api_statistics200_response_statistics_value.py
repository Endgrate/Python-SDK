# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetApiStatistics200ResponseStatisticsValue(BaseModel):
    """
    GetApiStatistics200ResponseStatisticsValue
    """ # noqa: E501
    batch_size: Optional[StrictInt] = None
    records: Optional[StrictInt] = None
    batches: Optional[StrictInt] = None
    batches_queued: Optional[StrictInt] = None
    batches_success: Optional[StrictInt] = None
    batches_fail: Optional[StrictInt] = None
    records_transferred: Optional[StrictInt] = None
    completed: Optional[StrictBool] = None
    provider: Optional[StrictStr] = None
    integration: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["batch_size", "records", "batches", "batches_queued", "batches_success", "batches_fail", "records_transferred", "completed", "provider", "integration"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetApiStatistics200ResponseStatisticsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetApiStatistics200ResponseStatisticsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batch_size": obj.get("batch_size"),
            "records": obj.get("records"),
            "batches": obj.get("batches"),
            "batches_queued": obj.get("batches_queued"),
            "batches_success": obj.get("batches_success"),
            "batches_fail": obj.get("batches_fail"),
            "records_transferred": obj.get("records_transferred"),
            "completed": obj.get("completed"),
            "provider": obj.get("provider"),
            "integration": obj.get("integration")
        })
        return _obj


