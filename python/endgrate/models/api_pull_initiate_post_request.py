# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from endgrate.models.configuration_callback_schema_endgrate import ConfigurationCallbackSchemaEndgrate
from endgrate.models.configuration_callback_schema_passthrough_schemas_value import ConfigurationCallbackSchemaPassthroughSchemasValue
from endgrate.models.configuration_callback_schema_schemas_value import ConfigurationCallbackSchemaSchemasValue
from endgrate.models.dict[str,_configuration_callback_schema_passthrough_schemas_value] import Dict[str, ConfigurationCallbackSchemaPassthroughSchemasValue]
from endgrate.models.dict[str,_configuration_callback_schema_schemas_value] import Dict[str, ConfigurationCallbackSchemaSchemasValue]
from typing import Optional, Set
from typing_extensions import Self

class ApiPullInitiatePostRequest(BaseModel):
    """
    ApiPullInitiatePostRequest
    """ # noqa: E501
    success: Optional[Any] = None
    session_id: Optional[Any] = None
    endgrate: Optional[ConfigurationCallbackSchemaEndgrate] = None
    schemas: Optional[Dict[str, ConfigurationCallbackSchemaSchemasValue]] = Field(default=None, description="Schema information, keyed by endgrate type.")
    passthrough_schemas: Optional[Dict[str, ConfigurationCallbackSchemaPassthroughSchemasValue]] = Field(default=None, description="Passthrough schema information, keyed by endgrate type.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata from ${request.body#/data_webhook/metadata}.")
    __properties: ClassVar[List[str]] = ["success", "session_id", "endgrate", "schemas", "passthrough_schemas", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPullInitiatePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endgrate
        if self.endgrate:
            _dict['endgrate'] = self.endgrate.to_dict()
        # set to None if success (nullable) is None
        # and model_fields_set contains the field
        if self.success is None and "success" in self.model_fields_set:
            _dict['success'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPullInitiatePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "session_id": obj.get("session_id"),
            "endgrate": ConfigurationCallbackSchemaEndgrate.from_dict(obj["endgrate"]) if obj.get("endgrate") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


