# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from endgrate.models.error_list_schema_endgrate import ErrorListSchemaEndgrate
from typing import Optional, Set
from typing_extensions import Self

class ApiPullInitiatePostRequest1(BaseModel):
    """
    ApiPullInitiatePostRequest1
    """ # noqa: E501
    success: Optional[StrictBool] = None
    pk: Optional[Any] = None
    transfer_id: Optional[Any] = None
    session_id: Optional[Any] = None
    timestamp: Optional[Any] = None
    error_resolve_text: Optional[Any] = None
    error_type: Optional[Any] = Field(default=None, description="The `internal` error type indicates a problem with the internal server. The `integration` error type indicates a problem with the chosen integration. The `upstream` error type indicates a problem that arises from the integration provider. Errors classified as `authentication` are related to user authentication processes, including login issues or problems with access tokens. Lastly, `mapping` errors occur when there are discrepancies or issues in data mapping, such as invalid data points or incorrect alignments of data fields.")
    resolved: Optional[Any] = None
    endgrate: Optional[ErrorListSchemaEndgrate] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata from ${request.body#/error_webhook/metadata}.")
    __properties: ClassVar[List[str]] = ["success", "pk", "transfer_id", "session_id", "timestamp", "error_resolve_text", "error_type", "resolved", "endgrate", "metadata"]

    @field_validator('error_type')
    def error_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['internal', 'integration', 'upstream', 'authentication', 'mapping']):
            raise ValueError("must be one of enum values ('internal', 'integration', 'upstream', 'authentication', 'mapping')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPullInitiatePostRequest1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endgrate
        if self.endgrate:
            _dict['endgrate'] = self.endgrate.to_dict()
        # set to None if pk (nullable) is None
        # and model_fields_set contains the field
        if self.pk is None and "pk" in self.model_fields_set:
            _dict['pk'] = None

        # set to None if transfer_id (nullable) is None
        # and model_fields_set contains the field
        if self.transfer_id is None and "transfer_id" in self.model_fields_set:
            _dict['transfer_id'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if error_resolve_text (nullable) is None
        # and model_fields_set contains the field
        if self.error_resolve_text is None and "error_resolve_text" in self.model_fields_set:
            _dict['error_resolve_text'] = None

        # set to None if error_type (nullable) is None
        # and model_fields_set contains the field
        if self.error_type is None and "error_type" in self.model_fields_set:
            _dict['error_type'] = None

        # set to None if resolved (nullable) is None
        # and model_fields_set contains the field
        if self.resolved is None and "resolved" in self.model_fields_set:
            _dict['resolved'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPullInitiatePostRequest1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "pk": obj.get("pk"),
            "transfer_id": obj.get("transfer_id"),
            "session_id": obj.get("session_id"),
            "timestamp": obj.get("timestamp"),
            "error_resolve_text": obj.get("error_resolve_text"),
            "error_type": obj.get("error_type"),
            "resolved": obj.get("resolved"),
            "endgrate": ErrorListSchemaEndgrate.from_dict(obj["endgrate"]) if obj.get("endgrate") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


