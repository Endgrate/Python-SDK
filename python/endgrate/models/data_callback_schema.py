# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from endgrate.models.completed_callback_schema_endgrate import CompletedCallbackSchemaEndgrate
from endgrate.models.transfer_data_schema_inner import TransferDataSchemaInner
from typing import Optional, Set
from typing_extensions import Self

class DataCallbackSchema(BaseModel):
    """
    DataCallbackSchema
    """ # noqa: E501
    success: Optional[StrictBool] = None
    transfer_id: Optional[StrictStr] = None
    session_id: Optional[StrictStr] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata from ${request.body#/data_webhook/metadata}.")
    endgrate: Optional[CompletedCallbackSchemaEndgrate] = None
    completed: Optional[StrictBool] = Field(default=None, description="Whether or not the transfer has completed.")
    transfer_data: Optional[List[TransferDataSchemaInner]] = Field(default=None, description="Returned transfer data.")
    __properties: ClassVar[List[str]] = ["success", "transfer_id", "session_id", "metadata", "endgrate", "completed", "transfer_data"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataCallbackSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endgrate
        if self.endgrate:
            _dict['endgrate'] = self.endgrate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transfer_data (list)
        _items = []
        if self.transfer_data:
            for _item in self.transfer_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transfer_data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataCallbackSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "transfer_id": obj.get("transfer_id"),
            "session_id": obj.get("session_id"),
            "metadata": obj.get("metadata"),
            "endgrate": CompletedCallbackSchemaEndgrate.from_dict(obj["endgrate"]) if obj.get("endgrate") is not None else None,
            "completed": obj.get("completed"),
            "transfer_data": [TransferDataSchemaInner.from_dict(_item) for _item in obj["transfer_data"]] if obj.get("transfer_data") is not None else None
        })
        return _obj


