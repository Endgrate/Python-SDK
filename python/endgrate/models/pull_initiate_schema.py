# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from endgrate.models.data_webhook_schema import DataWebhookSchema
from endgrate.models.webhook_schema import WebhookSchema
from typing import Optional, Set
from typing_extensions import Self

class PullInitiateSchema(BaseModel):
    """
    PullInitiateSchema
    """ # noqa: E501
    completed_webhook: Optional[WebhookSchema] = Field(default=None, description="Endgrate will POST to this webhook whenever a transfer is completed.")
    configuration_webhook: Optional[WebhookSchema] = Field(default=None, description="Endgrate will POST to this webhook when the session is configured by the user.")
    data_webhook: Optional[DataWebhookSchema] = Field(default=None, description="Endgrate will POST to this webhook whenever new data is received.")
    error_webhook: Optional[WebhookSchema] = Field(default=None, description="Endgrate will POST to this webhook whenever an error occurs.")
    field_selection: Optional[Any] = Field(default=None, description="Whether or not to allow the user to configure field mapping.")
    passthrough_fields: Optional[Any] = Field(default=None, description="Whether or not passthrough fields are allowed.")
    passthrough_schemas: Optional[Any] = Field(default=None, description="Whether or not passthrough schemas are allowed.")
    sync: Optional[Any] = Field(default=None, description="Whether or not to return only updated (new) data when pulling data.")
    prepopulate: Optional[Dict[str, Any]] = None
    provider: Optional[Any] = Field(default=None, description="A pre-selected integration provider. If specified, the user will be directly redirected to the specific authentication page.")
    redirect_url: Optional[Any] = Field(default=None, description="A URL that users will be redirected to after setting up the session.")
    resource_selection: Optional[Any] = Field(default=None, description="Whether or not to allow the user to choose the integrations for a given schema (e.g. choosing \"Get Contacts\" for a contact schema).")
    save_session: Optional[Any] = Field(default=None, description="Whether or not the session should be persisted permanently. If false, sessions will expire after 72 hours.")
    var_schema: Optional[Any] = Field(default=None, description="An array of schemas to be pulled in.", alias="schema")
    schema_selection: Optional[Any] = Field(default=None, description="Whether or not to allow the user to choose which schemas to pull in.")
    statistics: Optional[Any] = Field(default=None, description="Whether or not to allow the user to see transfer statistics.")
    webhook_concurrency: Optional[Any] = Field(default=None, description="Whether or not to execute POST requests to webhooks concurrently.")
    bypass_ui: Optional[Any] = Field(default=None, description="Whether or not the Endgrate UI should be bypassed (Beta).")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["completed_webhook", "configuration_webhook", "data_webhook", "error_webhook", "field_selection", "passthrough_fields", "passthrough_schemas", "sync", "prepopulate", "provider", "redirect_url", "resource_selection", "save_session", "schema", "schema_selection", "statistics", "webhook_concurrency", "bypass_ui"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PullInitiateSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completed_webhook
        if self.completed_webhook:
            _dict['completed_webhook'] = self.completed_webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration_webhook
        if self.configuration_webhook:
            _dict['configuration_webhook'] = self.configuration_webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_webhook
        if self.data_webhook:
            _dict['data_webhook'] = self.data_webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_webhook
        if self.error_webhook:
            _dict['error_webhook'] = self.error_webhook.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if field_selection (nullable) is None
        # and model_fields_set contains the field
        if self.field_selection is None and "field_selection" in self.model_fields_set:
            _dict['field_selection'] = None

        # set to None if passthrough_fields (nullable) is None
        # and model_fields_set contains the field
        if self.passthrough_fields is None and "passthrough_fields" in self.model_fields_set:
            _dict['passthrough_fields'] = None

        # set to None if passthrough_schemas (nullable) is None
        # and model_fields_set contains the field
        if self.passthrough_schemas is None and "passthrough_schemas" in self.model_fields_set:
            _dict['passthrough_schemas'] = None

        # set to None if sync (nullable) is None
        # and model_fields_set contains the field
        if self.sync is None and "sync" in self.model_fields_set:
            _dict['sync'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirect_url'] = None

        # set to None if resource_selection (nullable) is None
        # and model_fields_set contains the field
        if self.resource_selection is None and "resource_selection" in self.model_fields_set:
            _dict['resource_selection'] = None

        # set to None if save_session (nullable) is None
        # and model_fields_set contains the field
        if self.save_session is None and "save_session" in self.model_fields_set:
            _dict['save_session'] = None

        # set to None if var_schema (nullable) is None
        # and model_fields_set contains the field
        if self.var_schema is None and "var_schema" in self.model_fields_set:
            _dict['schema'] = None

        # set to None if schema_selection (nullable) is None
        # and model_fields_set contains the field
        if self.schema_selection is None and "schema_selection" in self.model_fields_set:
            _dict['schema_selection'] = None

        # set to None if statistics (nullable) is None
        # and model_fields_set contains the field
        if self.statistics is None and "statistics" in self.model_fields_set:
            _dict['statistics'] = None

        # set to None if webhook_concurrency (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_concurrency is None and "webhook_concurrency" in self.model_fields_set:
            _dict['webhook_concurrency'] = None

        # set to None if bypass_ui (nullable) is None
        # and model_fields_set contains the field
        if self.bypass_ui is None and "bypass_ui" in self.model_fields_set:
            _dict['bypass_ui'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PullInitiateSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completed_webhook": WebhookSchema.from_dict(obj["completed_webhook"]) if obj.get("completed_webhook") is not None else None,
            "configuration_webhook": WebhookSchema.from_dict(obj["configuration_webhook"]) if obj.get("configuration_webhook") is not None else None,
            "data_webhook": DataWebhookSchema.from_dict(obj["data_webhook"]) if obj.get("data_webhook") is not None else None,
            "error_webhook": WebhookSchema.from_dict(obj["error_webhook"]) if obj.get("error_webhook") is not None else None,
            "field_selection": obj.get("field_selection"),
            "passthrough_fields": obj.get("passthrough_fields"),
            "passthrough_schemas": obj.get("passthrough_schemas"),
            "sync": obj.get("sync"),
            "prepopulate": obj.get("prepopulate"),
            "provider": obj.get("provider"),
            "redirect_url": obj.get("redirect_url"),
            "resource_selection": obj.get("resource_selection"),
            "save_session": obj.get("save_session"),
            "schema": obj.get("schema"),
            "schema_selection": obj.get("schema_selection"),
            "statistics": obj.get("statistics"),
            "webhook_concurrency": obj.get("webhook_concurrency"),
            "bypass_ui": obj.get("bypass_ui")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


