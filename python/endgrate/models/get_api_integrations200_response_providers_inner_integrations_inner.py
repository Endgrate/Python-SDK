# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetApiIntegrations200ResponseProvidersInnerIntegrationsInner(BaseModel):
    """
    GetApiIntegrations200ResponseProvidersInnerIntegrationsInner
    """ # noqa: E501
    display_name: Optional[StrictStr] = None
    endgrate_type: Optional[StrictStr] = None
    supports_push: Optional[StrictBool] = None
    supports_pull: Optional[StrictBool] = None
    is_custom_object: Optional[StrictBool] = None
    supports_associations: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["display_name", "endgrate_type", "supports_push", "supports_pull", "is_custom_object", "supports_associations"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetApiIntegrations200ResponseProvidersInnerIntegrationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetApiIntegrations200ResponseProvidersInnerIntegrationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "endgrate_type": obj.get("endgrate_type"),
            "supports_push": obj.get("supports_push"),
            "supports_pull": obj.get("supports_pull"),
            "is_custom_object": obj.get("is_custom_object"),
            "supports_associations": obj.get("supports_associations")
        })
        return _obj


