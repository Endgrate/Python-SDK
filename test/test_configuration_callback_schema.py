# coding: utf-8

"""
    Endgrate API

    Endgrate API Reference

    The version of the OpenAPI document: 1.0.0
    Contact: team@endgrate.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from endgrate.models.configuration_callback_schema import ConfigurationCallbackSchema

class TestConfigurationCallbackSchema(unittest.TestCase):
    """ConfigurationCallbackSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigurationCallbackSchema:
        """Test ConfigurationCallbackSchema
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigurationCallbackSchema`
        """
        model = ConfigurationCallbackSchema()
        if include_optional:
            return ConfigurationCallbackSchema(
                success = True,
                session_id = '',
                endgrate = endgrate.models.configuration_callback_schema_endgrate.ConfigurationCallbackSchema_endgrate(
                    provider = '', 
                    provider_info = endgrate.models.configuration_callback_schema_endgrate_provider_info.ConfigurationCallbackSchema_endgrate_provider_info(
                        name = '', 
                        display_name = '', 
                        url = '', 
                        image = '', 
                        auth_type = 'oauth', 
                        specific = endgrate.models.specific.specific(), 
                        endgrate_provider_type = '', ), ),
                schemas = {contact={integration_info={name=get-contacts, display_name=Get Contacts, method=IMPORT}, integration=get-contacts, schema={type=object, associations=true, endgrate_type=crm-contact, properties={email={type=string, format=email}, first_name={type=string}, last_name={type=string}, full_name={type=string}, company={type=string}, age={type=number}, is_employed={type=boolean}, lifecyclestage={title=Lifecycle Stage, type=string}}, required=[email], title=crm-contact, session_method=IMPORT}, passthrough_fields={properties={lifecyclestage={title=Lifecycle Stage, type=string}, required=[]}}}},
                passthrough_schemas = {custom={integration_info={name=get-custom-objects, display_name=Get Custom Objects, method=IMPORT}, integration=get-custom-objects, schema={type=object, associations=true, endgrate_type=Custom, properties=null, required=[], title=custom, session_method=IMPORT}, passthrough_fields={customfield1={type=string}, required=[customfield1]}}}
            )
        else:
            return ConfigurationCallbackSchema(
        )
        """

    def testConfigurationCallbackSchema(self):
        """Test ConfigurationCallbackSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
